import React, { Component, Container } from 'react';
import { connect } from 'react-redux';

import { selectBook } from '../actions/index';
import { bindActionCreators } from 'redux'; //function that takes action generated by action creator flows through the different reducers in the app

class BookList extends Component {
	renderList(){
		return this.props.books.map(book => {
			return (
				<li 
					onClick={() => this.props.selectBook(book)}
					key={book.title} 
					className="list-group-item">
					{book.title}
				</li>
			);
		});
	}
	render(){
		return (
			<ul className="list-group col-sm-4">
				{this.renderList()}
			</ul>
		)
	}
}

//takes the entire app state => return an object with entire state (this fn is the glue to react and redux)
function mapStateToProps(state){
	console.log("state", state);
	//Whatever that is returned from here will show up as props
	return {
		books: state.books
	};
}

//anything returned from this function will end up as props on the BookList container
function mapDispatchToProps(dispatch){
	// console.log('dispatch', dispatch);
	//whenever selectBook is called, the result should be passed to all of our reducers
	//when the selectorBook creator action gets called => make sure actions flows through the dispatch fn => takes all actions received and distribute to all reducers in the app
	return bindActionCreators({selectBook: selectBook}, dispatch);
}

//utilize connect function: Takes mapStateToProps fn and component => return a container: aware of the state that is contained within redux
//Promote BookList from a component to a container - it needs to know about the new dispatch method, selectBook. Make it available as a prop
export default connect(mapStateToProps, mapDispatchToProps)(BookList);